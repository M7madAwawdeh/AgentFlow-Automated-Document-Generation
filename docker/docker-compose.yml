version: '3.8'

services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: agentflow-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD:-root}
      MYSQL_DATABASE: ${DB_DATABASE:-agentflow}
      MYSQL_USER: ${DB_USERNAME:-agentflow}
      MYSQL_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - agentflow-network
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      timeout: 20s
      retries: 10

  # Redis for caching and queues
  redis:
    image: redis:7-alpine
    container_name: agentflow-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - agentflow-network

  # Python AI Agents Service
  python-agents:
    build:
      context: ../python-agents
      dockerfile: Dockerfile
    container_name: agentflow-python-agents
    restart: unless-stopped
    environment:
      - OPENROUTER_API_KEY=${OPENROUTER_API_KEY}
      - OPENROUTER_BASE_URL=${OPENROUTER_BASE_URL:-https://openrouter.ai/api/v1}
      - LARAVEL_API_URL=http://laravel-app:8000
      - DATABASE_URL=mysql://${DB_USERNAME:-agentflow}:${DB_PASSWORD:-password}@mysql:3306/${DB_DATABASE:-agentflow}
      - REDIS_URL=redis://redis:6379
      - LOG_LEVEL=${LOG_LEVEL:-INFO}
    ports:
      - "5000:5000"
    volumes:
      - ../python-agents:/app
      - python_cache:/app/.cache
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - agentflow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Laravel Application
  laravel-app:
    build:
      context: ../laravel-app
      dockerfile: Dockerfile
    container_name: agentflow-laravel
    restart: unless-stopped
    environment:
      - APP_ENV=${APP_ENV:-local}
      - APP_DEBUG=${APP_DEBUG:-true}
      - APP_KEY=${APP_KEY}
      - DB_CONNECTION=mysql
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_DATABASE=${DB_DATABASE:-agentflow}
      - DB_USERNAME=${DB_USERNAME:-agentflow}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - REDIS_HOST=redis
      - REDIS_PASSWORD=null
      - REDIS_PORT=6379
      - PYTHON_AGENTS_URL=http://python-agents:5000
      - QUEUE_CONNECTION=redis
      - SESSION_DRIVER=redis
      - CACHE_DRIVER=redis
    ports:
      - "8000:8000"
    volumes:
      - ../laravel-app:/var/www/html
      - laravel_storage:/var/www/html/storage
      - laravel_vendor:/var/www/html/vendor
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
      python-agents:
        condition: service_healthy
    networks:
      - agentflow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy (Optional)
  nginx:
    image: nginx:alpine
    container_name: agentflow-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - laravel-app
      - python-agents
    networks:
      - agentflow-network

  # Supervisor for Laravel Queue Workers
  supervisor:
    build:
      context: ../docker
      dockerfile: supervisor.Dockerfile
    container_name: agentflow-supervisor
    restart: unless-stopped
    environment:
      - DB_HOST=mysql
      - DB_DATABASE=${DB_DATABASE:-agentflow}
      - DB_USERNAME=${DB_USERNAME:-agentflow}
      - DB_PASSWORD=${DB_PASSWORD:-password}
      - REDIS_HOST=redis
    volumes:
      - ../laravel-app:/var/www/html
      - ./supervisor.conf:/etc/supervisor/conf.d/supervisord.conf:ro
    depends_on:
      mysql:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - agentflow-network

volumes:
  mysql_data:
  redis_data:
  laravel_storage:
  laravel_vendor:
  python_cache:

networks:
  agentflow-network:
    driver: bridge
